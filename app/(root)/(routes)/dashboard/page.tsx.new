'use client'
import remarkBreaks from "remark-breaks"
import { Prism as SyntaxHighlighter } from "react-syntax-highlighter"
import { vs } from "react-syntax-highlighter/dist/cjs/styles/prism"
// @ts-ignore - Type issues with react-syntax-highlighter styles
import remarkGfm from "remark-gfm"
import { useState } from "react"
import { Textarea } from "@/components/ui/textarea"
import ReactMarkdown from "react-markdown"
import { LucideIcon, Send } from "lucide-react"

interface BtnProps{
  icon: LucideIcon
}

export default function DashboardPage() {
  const [prompt, setPrompt] = useState("")
  const [loading, setLoading] = useState(false)
  const [response, setResponse] = useState<string | null>(null)

  const handleSubmit = async () => {
    if (!prompt.trim()) return;
    
    setLoading(true)
    try {
      const result = await fetch("/api/generate", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ prompt }),
      })
   
      if (!result.ok) throw new Error("Response Error")
      
      const data = await result.json() 
      setResponse(data.response || "no response text found")
    } catch (error) {
      console.error("error generating", error)
      setResponse("Application error")
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="flex flex-col h-screen p-4 items-center justify-center">
      <div className="flex-1 overflow-y-auto p-4">

        {response && (
         <div className="max-w-4xl mx-auto prose prose-sm">
           <ReactMarkdown 
             remarkPlugins={[remarkGfm, remarkBreaks]}
             components={{
               // @ts-ignore - Type issues with ReactMarkdown components
               code({ node, inline, className, children, ...props }) {
                 const match = /language-(\\w+)/.exec(className || "")
                 return !inline && match ? (
                   <SyntaxHighlighter
                     // @ts-ignore - Type issues with react-syntax-highlighter styles
                     style={vs}
                     language={match[1]}
                     PreTag="div"
                     {...props}
                   >
                     {String(children).replace(/\\n$/, "")}
                   </SyntaxHighlighter>
                 ) : (
                   <code className={className} {...props}>
                     {children}
                   </code>
                 )
               }
             }}
           >
             {response}
           </ReactMarkdown>
         </div>
        )}
      </div>
      
      <div className="w-full border-t bg-gradient-to-b from-background/10 to-background/80 p-4">
        <div className="mx-auto flex w-full max-w-4xl flex-col items-center gap-4">
          <Textarea 
            className="min-h-[80px] max-h-[300px] w-full resize-none overflow-y-auto p-4 focus-visible:ring-1" 
            placeholder="Type your message here..." 
            value={prompt}
            onChange={(e) => setPrompt(e.target.value)}
          />
          <div className="flex w-full justify-end">
            <button onClick={handleSubmit} disabled={loading} className="flex items-center gap-2 bg-blue-500 text-white px-4 py-2 rounded">
              {loading ? 'Sending...' : "Send "}
              <Send size={16} />
            </button>
          </div>
        </div>
      </div>
    </div>
  )
}
